% This script plots simulated data generated by the COMSOL model.
% 2020 Feb
% Juhyun Song

% V3: find the optimal thickness

% Post-process CC-CV charging data table.
clear;clc
%% Read the data

load matlabsweepresult_cccv_v10.mat
N_unitcell_vec = data.N_unitcell(:,1); % column vector
C_3D_vec = data.C_3D(1,:); % row vector


%% Calculate additional variables

% 1. Is SOC criterium met?
ismat_soc = data.cccv_f_soc;

% 2. Is Lithium plating condition met?
Elpcut = 0.010; % [V] source: XCEL 2019 Q1 Report
ismat_nlp = double(data.cccv_Elp1 > Elpcut); 
contour_nlp = contourf(data.n_delta*10^6,data.C_3D,ismat_nlp,[0.5 0.5]); close
patch_nlp_x = [contour_nlp(1,2:end),data.n_delta(end,1)*10^6,data.n_delta(1,1)*10^6];
patch_nlp_y = [contour_nlp(2,2:end),data.C_3D(1,end),data.C_3D(1,end)];

% 3. Is Temperature condition met?
T_allowed = 40; %[deg C]
ismat_Tmax = double((data.cccv_Tmax1 - 273.15) < T_allowed);
contour_Tmax = contourf(data.n_delta*10^6,data.C_3D,ismat_Tmax,[0.5 0.5]); close
patch_Tmax_x = contour_Tmax(1,2:end);
patch_Tmax_y = contour_Tmax(2,2:end);

figure
contourf(data.n_delta*10^6,data.C_3D,data.t/60,10); hold on
title('Time to Charge 15% - 95 % SOC [min]')
xlabel('Anode thickness (\mum)')
ylabel('Charting rate (C)')
h = colorbar;
ylabel(h, 't_{charge} [min]')
fill(patch_nlp_x,patch_nlp_y,[0.8500    0.3250    0.0980],'FaceAlpha',0.5); hold on
fill(patch_Tmax_x,patch_Tmax_y,'r','FaceAlpha',0.5)
ylim([0.5 6])

% 4. Optimal thickness
t_safeend = data.t;
t_safeend(~logical(ismat_nlp)|~logical(ismat_Tmax)) = inf; 
t_safe_end = min(t_safeend,[],2);

figure(2); hold on
plot(t_safe_end/60,data.n_delta(:,1)*10^6,'LineWidth',1)
axis square
title('Optimal Anode Thickness')
xlabel('Charging time (min)')
ylabel('Anode thickness (\mum)')

% minElp_mat = min(data.cccv_Elp1,data.cccv_Elp1


%% Plotting results
figure

subplot(2,2,1)
contourf(data.n_delta*10^6,data.C_3D,data.t/60,10); hold on
title('Time to Charge 15% - 95 % SOC [min]')
xlabel('Anode thickness (\mum)')
ylabel('Charting rate (C)')
h = colorbar;
ylabel(h, 't_{charge} [min]')


subplot(2,2,2)
contourf(data.n_delta*10^6,data.C_3D,data.cccv_Elp1,10); hold on
title('Minimum Li-Plating Potential [V]')
xlabel('Anode thickness (\mum)')
ylabel('Charting rate (C)')
h = colorbar;
ylabel(h, '\phi_{LP} [V]')

subplot(2,2,3)
contourf(data.n_delta*10^6,data.C_3D,data.cccv_Tmax1-273.15,10); hold on
title('Maximum Temperature [^oC]')
xlabel('Anode thickness (\mum)')
ylabel('Charting rate (C)')
h = colorbar;
ylabel(h, 'T_{max} [^oC]')

subplot(2,2,4)
plot(t_safe_end/60,data.n_delta(:,1)*10^6,'LineWidth',1)
axis square
title('Optimal Anode Thickness')
xlabel('Charging time (min)')
ylabel('Anode thickness (\mum)')


figure

subplot(2,2,1)
contourf(data.n_delta*10^6,data.C_3D,data.cccv_f_cv,1); hold on
title('If CV was initiated.')
xlabel('Anode thickness (\mum)')
ylabel('Charting rate (C)')

subplot(2,2,2)
contourf(data.n_delta*10^6,data.C_3D,data.cccv_f_soc,1); hold on
title('If SOC (95%) has met.')
xlabel('Anode thickness (\mum)')
ylabel('Charting rate (C)')
%h = colorbar;

subplot(2,2,3)
contourf(data.n_delta*10^6,data.C_3D,data.cccv_f_imin,1); hold on
title('If terminated by I_min.')
xlabel('Anode thickness (\mum)')
ylabel('Charting rate (C)')

subplot(2,2,4)
contourf(data.n_delta*10^6,data.C_3D,data.cccv_f_soc.*data.cccv_f_imin,1); hold on
title('If both flags are on.')
xlabel('Anode thickness (\mum)')
ylabel('Charting rate (C)')

figure
contourf(data.n_delta*10^6,data.C_3D,(data.t_cal),10); hold on
title('Calculation Time (sec)')
xlabel('Anode thickness (\mum)')
ylabel('Charting rate (C)')
h = colorbar;
return


%% Make data table
row_header = {'L_n','I','t','f_cv','f_soc','t_cc','t_cv','t_end','soc_end','minElp'};
datatable=array2table(c_out,'VariableNames',row_header);

%% Make variable matrices
I_vec=unique(datatable.I); N_I = length(I_vec);
L_vec=unique(datatable.L_n); N_L = length(L_vec);

datamat.t = zeros(N_I,N_L); datamat.f_cv = zeros(N_I,N_L); datamat.f_soc = zeros(N_I,N_L);
datamat.t_cc = zeros(N_I,N_L); datamat.t_cv = zeros(N_I,N_L); datamat.t_end = zeros(N_I,N_L);
datamat.soc_end = zeros(N_I,N_L); datamat.minElp = zeros(N_I,N_L); datamat.iflp = zeros(N_I,N_L);
for n_I = 1:N_I
    for n_L = 1:N_L
        index = find(datatable.I==I_vec(n_I) & datatable.L_n == L_vec(n_L));
        
        datamat.t(n_I,n_L) = datatable.t(index); 
        datamat.f_cv(n_I,n_L) = datatable.f_cv(index);  
        datamat.f_soc(n_I,n_L) = datatable.f_soc(index); 
        datamat.t_cc(n_I,n_L) = datatable.t_cc(index); 
        datamat.t_cv(n_I,n_L) = datatable.t_cv(index); 
        datamat.t_end(n_I,n_L) = datatable.t_end(index); 
        datamat.soc_end(n_I,n_L) = datatable.soc_end(index);  
        datamat.minElp(n_I,n_L) = datatable.minElp(index); 
        datamat.iflp(n_I,n_L) = datatable.minElp(index)<0; % binary variable, if lithium plating happened.
        
    end
end

datamat.t_safeend = datamat.t_end;
datamat.t_safeend(datamat.iflp==1) = inf; % if lithium plating happended, panalize by assigning t_safeend = inf. 
figure(9)
surface(datamat.t_safeend)

t_min = size(L_vec);
for n_L = 1:N_L

    t_min (n_L) = min(datamat.t_safeend(:,n_L)); % given a thickness, optimized charging time that prevents the li plating.
    
    
end


%% Outputs
figure(4) % Lithium plating potential
contourf(L_vec,I_vec,datamat.minElp,20,'LineColor','none'); hold on
contour(L_vec,I_vec,datamat.minElp,[0,0],'LineWidth',2,'LineColor','r')
axis([20 100 0.2 4])
colorbar; caxis([-0.09 0.07])
xlabel('Anode thickness (um)'); ylabel('I_{cc} (C)')
title('min(\phi_s - \phi_l)')

figure(5) % Time to charge given a thickness
plot(L_vec,t_min/60,'LineWidth',2)
xlabel('Anode thickness (um)')
ylabel('t_{min} (minute)')
title('Charging time for CCCV protocol')


figure(6) % Overlapping the time contour
contourf(L_vec,I_vec,datamat.minElp,20,'LineColor','none'); hold on
contour(L_vec,I_vec,datamat.minElp,[0,0],'LineWidth',2,'LineColor','r')
axis([20 100 0.2 4])
colorbar; caxis([-0.09 0.07])
xlabel('Anode thickness (um)'); ylabel('I_{cc} (C)')
title(['Field: min(\phi_s - \phi_l)' newline 'Curves: Iso-charging-time curves (every 10 minutes)'])
[C3,h3]=contour(L_vec,I_vec,datamat.t_end,'-k');
h3.LevelList = linspace(10,120,12); 
h3.ZData = h3.ZData/60; 
clabel(C3,h3)

figure(7)
plot(t_min/60,L_vec,'LineWidth',2)
xlabel('Required charging time (min)')
ylabel('Anode thickness (um)')
title('Anode design curve')

%surface(L_vec,I_vec,datamat.f_soc)
%figure(8)
%contourf(L_vec,I_vec,datamat.t_end)


% figure(5)
% contour(L_vec,I_vec,datamat.iflp,[0,0],)